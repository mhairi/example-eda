librar(knitr)
library(knitr)
```{r}
load('clean_data.RData')
suppressPackageStartupMessages(library(randomForest))
suppressPackageStartupMessages(library(e1071))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(countrycode))
dd <- sample_frac(dd, 0.1)
dd$region <- countrycode(dd$country, 'country.name', 'region') %>% as.factor
dd <- filter(dd, !is.na(region)) # remove missing regions
train <- sample_frac(dd, 0.75)
test  <- setdiff(dd, train)
```
### Linear Model
First a standard linear model as a baseline.
```{r, cache = TRUE}
model_lm <- lm(revenue ~ dau + network + channel + region, data = train)
prediction_lm <- predict(model_lm, newdata = test)
```
### Random Forest
```{r, cache = TRUE}
model_rf <- randomForest(revenue ~ dau + network + channel + region, data = train)
prediction_rf <- predict(model_rf, newdata = test)
```
### SVM
```{r, cache = TRUE}
model_svm <- svm(revenue ~ dau + network + channel + region, data = train)
prediction_svm <- predict(model_svm, newdata = test)
```
### Naive Bayes
```{r, cache = TRUE}
model_bayes <- naiveBayes(revenue ~ dau + network + channel + region, data = train)
prediction_bayes <- predict(model_bayes, newdata = test)
```
### Save all the results
```{r}
save(prediction_lm, file = 'lm.RData')
save(prediction_rf, file = 'rf.RData')
save(prediction_svm, file = 'svm.RData')
save(prediction_bayes, file = 'bayes.RData')
mse <- function(prediction, actual = test$revenue){
mean((prediction - actual)**2)
}
mse(prediction_lm)
prediction_lm
mse(prediction_rf)
mse(prediction_lm)
mse(prediction_svm)
mse(prediction_bayes)
test$revenue
prediction_lm
mse(prediction_lm)
mse(prediction_rf)
mse(prediction_svm)
mse <- function(prediction, actual = test$revenue){
mean(abs(prediction - actual))
}
mse(prediction_lm)
mse(prediction_rf)
mse(prediction_svm)
results <- data.frame(
actual = test$revenue,
lm     = prediction_lm,
rf     = prediction_rf,
svm    = prediction_svm)
results <- arrange(results, actual)
results
suppressPackageStartupMessages(library(tidyr))
?gather
results %>%
gather(results, result, value)
results %>%
gather(result, value)
results %>%
tbl_df %>%
gather(result, value, - actual)
results %>%
tbl_df %>%
gather(result, value, - actual) %>% tail
results <-
results %>%
tbl_df %>%
arrange(actual)
gather(result, prediction, - actual)
results <-
results %>%
tbl_df %>%
arrange(actual)
gather(results, prediction, - actual)
results
results <-
results %>%
tbl_df %>%
arrange(actual) %>%
gather(results, prediction, - actual)
results
results <- data.frame(
actual = test$revenue,
lm     = prediction_lm,
rf     = prediction_rf,
svm    = prediction_svm)
results <-
results %>%
tbl_df %>%
arrange(actual) %>%
gather(model, prediction, - actual)
results
results <- data.frame(
actual = test$revenue,
lm     = prediction_lm,
rf     = prediction_rf,
svm    = prediction_svm)
results <-
results %>%
tbl_df %>%
arrange(actual) %>%
mutate(x = row_number(actual)) %>%
gather(model, prediction, - actual)
results
results <- data.frame(
actual = test$revenue,
lm     = prediction_lm,
rf     = prediction_rf,
svm    = prediction_svm)
results <-
results %>%
tbl_df %>%
arrange(actual) %>%
mutate(x = row_number(actual)) %>%
gather(model, prediction, - actual, -x)
results
ggplot(results) +
aes(x = x, y = actual) +
geom_line()
suppressPackageStartupMessages(library(ggplot2))
ggplot(results) +
aes(x = x, y = actual) +
geom_line()
ggplot(results) +
aes(x = x, y = actual) +
geom_line() +
facet_grid(model ~ .)
ggplot(results) +
aes(x = x, y = actual) +
geom_line() +
geom_line(aes(y = prediction), fill = 'deeppink2')
facet_grid(model ~ .)
ggplot(results) +
aes(x = x, y = actual) +
geom_line() +
geom_line(aes(y = prediction), fill = 'deeppink2') +
facet_grid(model ~ .)
ggplot(results) +
aes(x = x, y = actual) +
geom_line() +
geom_line(aes(y = prediction), colour = 'deeppink2') +
facet_grid(model ~ .)
ggplot(results) +
aes(x = x, y = actual) +
geom_line() +
geom_line(aes(y = prediction), colour = 'deeppink2') +
facet_grid(model ~ .) +
ylim(0, 100)
ggplot(results) +
aes(x = x, y = actual) +
geom_line() +
geom_line(aes(y = prediction), colour = 'deeppink2') +
facet_grid(model ~ .) +
coord_cartesian(ylim = c(0, 100))
ggplot(results) +
aes(x = x, y = actual, colour = model) +
geom_line(colour = 'grey80') +
geom_line(aes(y = prediction)) +
facet_grid(model ~ .)
ggplot(results) +
aes(x = x, y = actual, colour = model) +
geom_line(colour = 'grey20') +
geom_line(aes(y = prediction)) +
facet_grid(model ~ .)
ggplot(results) +
aes(x = x, y = actual, colour = model) +
geom_line(colour = 'grey20') +
geom_line(aes(y = prediction)) +
facet_grid(model ~ .) +
coord_cartesian(ylim = c(0, 100))
