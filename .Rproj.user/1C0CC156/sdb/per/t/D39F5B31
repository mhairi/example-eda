{
    "contents" : "---\ntitle: \"Comparing Models of Revenue\"\nauthor: \"Mhairi McNeill\"\ndate: \"20 November 2015\"\noutput: html_document\n---\n\nHere I model the revenue made as a function of the number of users, the ad network, the country and the device type (Android or iOS). I will compare several different models to see which is the best at predicting revenue.\n\nFirst I split the data into a test set and a training set. All evaluations of predictive power are made on the training set. I also converted amalgamated countries into region, to increase the number of observations in each group. \n\nI also took just a small sample of the data, to increase the speed of the models for this example. \n\n```{r, cache = TRUE}\nload('clean_data.RData')\n\nsuppressPackageStartupMessages(library(randomForest))\nsuppressPackageStartupMessages(library(e1071))\nsuppressPackageStartupMessages(library(dplyr))\nsuppressPackageStartupMessages(library(tidyr))\nsuppressPackageStartupMessages(library(ggplot2))\nsuppressPackageStartupMessages(library(countrycode))\n\ndd <- sample_frac(dd, 0.1)\n\ndd$region <- countrycode(dd$country, 'country.name', 'region') %>% as.factor\n\ndd <- filter(dd, !is.na(region)) # remove missing regions\n\ntrain <- sample_frac(dd, 0.75)\ntest  <- setdiff(dd, train)\n\n```\n\n### Linear Model\n\nFirst a standard linear model as a baseline. \n\n```{r, cache = TRUE}\nmodel_lm <- lm(revenue ~ dau + network + channel + region, data = train)\n\nprediction_lm <- predict(model_lm, newdata = test)\n```\n\n### Random Forest\n\n```{r, cache = TRUE}\nmodel_rf <- randomForest(revenue ~ dau + network + channel + region, data = train)\n\nprediction_rf <- predict(model_rf, newdata = test)\n```\n\n### SVM\n\n```{r, cache = TRUE}\nmodel_svm <- svm(revenue ~ dau + network + channel + region, data = train)\n\nprediction_svm <- predict(model_svm, newdata = test)\n```\n\n### Save all the results\n```{r}\nsave(prediction_lm, file = 'lm.RData')\nsave(prediction_rf, file = 'rf.RData')\nsave(prediction_svm, file = 'svm.RData')\n```\n\n## Evaluation\n\nFor this example I am evaluating by finding the mean-absolute error. This was chosen because some of the right skew distribution of revenue values. This error measure will not overly penalise models which get a few high values wrong. \n\n```{r}\nmae <- function(prediction, actual = test$revenue){\n  mean(abs(prediction - actual))  \n}\n\nmae(prediction_lm)\nmae(prediction_rf)\nmae(prediction_svm)\n```\nSVM has the lowest error here, although random the random forest model still does far better than the simple linear regression.\n\nWe can make plots to understand how well the models fit the data. Here I am arranging the actual revenues in order of magnitude and comparing with the fitted values in the models.\n\n```{r}\nresults <- data.frame(\n  actual = test$revenue,\n  lm     = prediction_lm,\n  rf     = prediction_rf,\n  svm    = prediction_svm)\n\nresults <- \nresults %>%\n  tbl_df %>%\n  arrange(actual) %>%\n  mutate(x = row_number(actual)) %>%\n  gather(model, prediction, - actual, -x) \n\nggplot(results) +\n  aes(x = x, y = actual, colour = model) +\n  geom_line(colour = 'grey20') +\n  geom_line(aes(y = prediction)) +\n  facet_grid(model ~ .)\n```\n\nWe can see that all models fit badly on the extreme values. We can zoom in to see only predictions made for revenue values below 100.\n\n```{r}\nggplot(results) +\n  aes(x = x, y = actual, colour = model) +\n  geom_line(colour = 'grey20') +\n  geom_line(aes(y = prediction)) +\n  facet_grid(model ~ .) +\n  coord_cartesian(ylim = c(0, 100))\n```\n\nHere we can see that random forest is overestimating for all zero valued results. This might be important depending on the application. \n\n\n",
    "created" : 1448039805274.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3063877748",
    "id" : "D39F5B31",
    "lastKnownWriteTime" : 1448209317,
    "path" : "~/Personal/Example EDA/predictive_modeling.Rmd",
    "project_path" : "predictive_modeling.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_markdown"
}